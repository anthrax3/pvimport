#!/usr/bin/env bash

################################################################################
######################## Definitions of user variables #########################
################################################################################


################################################################################
######################## Definitions of user functions #########################
################################################################################

# ``````````````````````````````````````````````````````````````````````````````
# Function name: XenInit()
#
# Description:
#   Initialization of the remote Xen environment.
#
# Usage:
#   XenInit
#
# Examples:
#   XenInit
#

function XenInit() {

  local _FUNCTION_ID="XenInit"
  local _STATE=0

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  #              Preparing configuration of remote environment.              #
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  _sprintf "head" "preparing configuration of remote environment"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "preparing configuration of remote environment"

  _init "FlushRemoteFiles ${_pv_xen_vars}"

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  #              Checking configuration of remote environment.               #
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  _sprintf "head" "checking configuration of remote environment"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "checking configuration of remote environment"

  _init "CheckRemoteStorage ${hv_storage}"
  _init "XenVmCheck ${vm_id}"

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  #             Downloading configuration of remote environment.             #
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  _sprintf "head" "downloading configuration of remote environment"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "downloading configuration of remote environment"

  _init "GetRemoteFiles ${_pv_xen_vars}"

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  #                            Exporting $vm_id.                             #
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  _sprintf "head" "exporting virtual machine"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "exporting virtual machine"

  _init "XenVmExport ${vm_id}"

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  #                     Copying a virtual machine disks.                     #
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  _sprintf "head" "copying a virtual machine disks"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "copying a virtual machine disks"

  _init "XenVmCopy ${vm_id}"

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  #                           Extracting ova files.                          #
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  _sprintf "head" "extracting ova files"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "extracting ova files"

  _init "XenVmExtract ${vm_id}"

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  #                 Converting disks to $pve_format format.                  #
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
  _sprintf "head" "converting disks to $pve_format format"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "converting disks to $pve_format format"

  _x=1

  # Issue to solve:
  # shellcheck disable=SC2044
  _fname=""
  for _fname in $(find ./* -type d -name "Ref:*" | cut -d "/" -f2 | sort -V) ; do

    _init "XenVmConvert ${_fname}"

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: XenVmCheck()
#
# Description:
#   Checks of the Xen remote virtual machine exist.
#
# Usage:
#   XenVmCheck vm_id
#
# Examples:
#   XenVmCheck PROD-web01
#

function XenVmCheck() {

  local _FUNCTION_ID="XenVmCheck"
  local _STATE=0

  local _vmid="$1"

  _msg_args+=(\
  "vm id: '${_vmid}'")

  _cmd_args+=(\
  "ssh ${ssh_opt} ${hv_host} -p ${port} if [[ ! \$(xe vm-list | grep ${_vmid}) ]] ; then exit 1 ; fi")

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: XenVmExport()
#
# Description:
#   Exports the Xen virtual machine:
#     - takes a virtual machine snapshot
#     - exports snapshot to file with extension 'ova'
#
# Usage:
#   XenVmExport vm_id
#
# Examples:
#   XenVmExport PROD-web01
#

function XenVmExport() {

  local _FUNCTION_ID="XenVmExport"
  local _STATE=0

  local _vmid="$1"

  _msg_args+=(\
  "creating snapshot: '${_vmid}-${_random}'" \
  "exporting snapshot: '${_vmid}.ova'")

  _cmd_args+=(\
  "ssh ${ssh_opt} ${hv_host} -p ${port} _id=\$(xe vm-snapshot vm=${_vmid} new-name-label=${_vmid}-${_random}) ; echo \$_id >>${_pv_xen_vars}" \
  "ssh ${ssh_opt} ${hv_host} -p ${port} _id=\$(cat ${_pv_xen_vars}) ; xe vm-export vm=\${_id} filename=${hv_storage}/${_vmid}.ova")

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: XenVmCopy()
#
# Description:
#   Copies the Xen virtual machine from remote host to local host.
#
# Usage:
#   XenVmCopy vm_id
#
# Examples:
#   XenVmCopy PROD-web01
#

function XenVmCopy() {

  local _FUNCTION_ID="XenVmCopy"
  local _STATE=0

  local _vmid="$1"

  _msg_args+=(\
  "checking: '${_vmid}.ova'" \
  "get src: '${_vmid}.ova'")

  _cmd_args+=(\
  "ssh ${ssh_opt} ${hv_host} -p ${port} if [[ ! -e \"${hv_storage}/${_vmid}.ova\" ]] ; then exit 1 ; fi" \
  "scp ${ssh_opt} -P ${port} ${hv_host}:${hv_storage}/${_vmid}.ova ${lo_path}")

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: XenVmExtract()
#
# Description:
#   Extracts the Xen virtual machine disks.
#
# Usage:
#   XenVmExtract vm_id
#
# Examples:
#   XenVmExtract PROD-web01
#

function XenVmExtract() {

  local _FUNCTION_ID="XenVmExtract"
  local _STATE=0

  local _vmid="$1"

  _msg_args+=(\
  "checking: '${_vmid}.ova'" \
  "src: '${_vmid}.ova'")

  _cmd_args+=(\
  "eval if [[ ! -e ${_vmid}.ova ]] ; then exit 1 ; fi" \
  "tar xf ${_vmid}.ova -C ${lo_path}")

  # shellcheck disable=SC2154
  if [[ "$remove_unused" == "yes" ]] ; then

    _msg_args+=(\
    "remove: '${_vmid}.ova'")

    _cmd_args+=(\
    "rm -fr ${_vmid}.ova")

  fi

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: XenVmConvert()
#
# Description:
#   Converts the Xen virtual machine disks.
#
# Usage:
#   XenVmConvert /path/to/local/xen/disk
#
# Examples:
#   XenVmConvert /xfs900/datastore/xen/PROD-web01.{img,qcow2}
#

function XenVmConvert() {

  local _FUNCTION_ID="XenVmConvert"
  local _STATE=0

  local _fdx="$1"

  local _fda
  local _fdb
  local _fdc

  # Store new directory/file name (eg. Ref_20).
  _fda=$(echo "$_fdx" | tr ":" "_")

  # Store new 'img' file (eg. 1-Ref_20.img).
  _fdb="${_x}-${_fda}.img"

  _msg_args+=(\
  "checking: '${_fdx}'" \
  "src: '${_fdx}', dst: '${_fdb}'")

  _cmd_args+=(\
  "eval if [[ ! -d ${_fdx} ]] ; then exit 1 ; fi" \
  "xenmigrate --convert=${_fdx} ${_fdb}")

  if [[ "$remove_unused" == "yes" ]] ; then

    _msg_args+=(\
    "remove: '${_fdx}'")

    _cmd_args+=(\
    "rm -fr ${_fdx}")

  fi

  if [[ "$pve_format" == "qcow2" ]] ; then

    # Store 'qcow2' file name (eg. 1-Ref_20.qcow2).
    _fdc="${_fdb%.*}.qcow2"

    _msg_args+=(\
    "checking: '${_fdb}'" \
    "src: '${_fdb}', dst: '${_fdc}'")

    _cmd_args+=(\
    "eval if [[ ! -e ${_fdb} ]] ; then exit 1 ; fi" \
    "qemu-img convert -f raw -O qcow2 ${_fdb} ${_fdc}")

    if [[ "$remove_unused" == "yes" ]] ; then

      _msg_args+=(\
      "remove: '${_fdb}'")

      _cmd_args+=(\
      "rm -fr ${_fdb}")

    fi

  fi

  _x=$((_x + 1))

  return $_STATE

}
