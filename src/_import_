################################################################################
######################## Definitions of user variables #########################
################################################################################


################################################################################
######################## Definitions of user functions #########################
################################################################################

# ``````````````````````````````````````````````````````````````````````````````
# Function name: CheckConn()
#
# Description:
#   Validates the connection to the remote server.
#
# Usage:
#   CheckConn _conn_params[@]
#
# Examples:
#   CheckConn _conn_params[@]
#

function CheckConn() {

  local _FUNCTION_ID="CheckConn"
  local _STATE=0

  local _conn_params=("${!1}")

  local _socket="${_conn_params[1]}:${_conn_params[2]}"
  local _timeout="${_conn_params[3]}"

  _sprintf "head" "testing connection"

  _logger "info" \
    "$_FUNCTION_ID()" \
    "testing connection"

  local _arg=("check ${_socket%%:*}":"wait-for-it -h ${_socket%%:*} -p ${_socket##*:} -t 5 -q")

  for i in "${_arg[@]}" ; do

    _msg="${i%%:*}"
    _full_command="${i#*:}"
  
    _sprintf "info" "$_msg"

    _logger "info" \
      "$_FUNCTION_ID()" \
      "$_msg"

    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmExport()
#
# Description:
#   Exports the virtual machine.
#
# Usage:
#   VmExport _conn_params[@] _hypervisor_params[@]
#
# Examples:
#   VmExport _conn_params[@] _hypervisor_params[@]
#

function VmExport() {

  local _FUNCTION_ID="VmExport"
  local _STATE=0

  local _conn_params=("${!1}")
  local _hypervisor_params=("${!2}")

  local _socket="${_conn_params[0]}@${_conn_params[1]}"
  local _port="${_conn_params[2]}"

  local _vm_type="${_hypervisor_params[0]}"
  local _vm_storage_r="${_hypervisor_params[1]}"
  local _vm_id="${_hypervisor_params[2]}"
  local _vm_name="${_hypervisor_params[3]}"
  local _vm_storage_l="${_hypervisor_params[4]}"
  local _random_value="${_hypervisor_params[5]}"

  _sprintf "head" "exporting a virtual machine"

  local _arg=("create snapshot ${_vm_name}-${_random_value} for ${_vm_id}":"ssh ${_socket} -p ${_port} _id=\$(xe vm-snapshot vm=${_vm_id} new-name-label=${_vm_name}-${_random_value}) ; echo \$_id > ${_pv_vars}" \
              "export snapshot for ${_vm_id}":"ssh ${_socket} -p ${_port} _id=\$(cat ${_pv_vars}) ; xe vm-export vm=\${_id} filename=${_vm_storage_r}/${_vm_name}.ova")

  if [[ "$_vm_type" == "xen" ]] ; then

    for i in "${_arg[@]}" ; do

      _msg="${i%%:*}"
      _full_command="${i#*:}"

      _sprintf "info" "$_msg"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "$_msg"
  
      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmCopy()
#
# Description:
#   Copies the virtual machine from remote host to local (target) host.
#
# Usage:
#   VmCopy _conn_params[@] _hypervisor_params[@]
#
# Examples:
#   VmCopy _conn_params[@] _hypervisor_params[@]
#

function VmCopy() {

  local _FUNCTION_ID="VmCopy"
  local _STATE=0

  local _conn_params=("${!1}")
  local _hypervisor_params=("${!2}")

  local _socket="${_conn_params[0]}@${_conn_params[1]}"
  local _port="${_conn_params[2]}"

  local _vm_type="${_hypervisor_params[0]}"
  local _vm_storage_r="${_hypervisor_params[1]}"
  local _vm_id="${_hypervisor_params[2]}"
  local _vm_name="${_hypervisor_params[3]}"
  local _vm_storage_l="${_hypervisor_params[4]}"
  local _random_value="${_hypervisor_params[5]}"

  _sprintf "head" "copying virtual machine"

  local _arg=("from remote ${_vm_storage_r} to local ${_vm_storage_l}/${_vm_name}":"scp -P ${_port} ${_socket}:${_vm_storage_r}/${_vm_name}.ova ${_vm_storage_l}/${_vm_name}")

  if [[ "$_vm_type" == "xen" ]] ; then

    if [[ ! -d "${_vm_storage_l}/${_vm_name}" ]] ; then

      _sprintf "info" "create local directory: ${_vm_storage_l}/${_vm_name}"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "create local directory: ${_vm_storage_l}/${_vm_name}"

      mkdir ${_vm_storage_l}/${_vm_name}

    fi

    for i in "${_arg[@]}" ; do

      _msg="${i%%:*}"
      _full_command="${i#*:}"

      _sprintf "info" "$_msg"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "$_msg"
  
      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmImport()
#
# Description:
#   Imports the virtual machine.
#
# Usage:
#   VmImport _conn_params[@] _hypervisor_params[@]
#
# Examples:
#   VmImport _conn_params[@] _hypervisor_params[@]
#

function VmImport() {

  local _FUNCTION_ID="VmImport"
  local _STATE=0

  local _conn_params=("${!1}")
  local _hypervisor_params=("${!2}")

  local _socket="${_conn_params[0]}@${_conn_params[1]}"
  local _port="${_conn_params[2]}"

  local _vm_type="${_hypervisor_params[0]}"
  local _vm_storage_r="${_hypervisor_params[1]}"
  local _vm_id="${_hypervisor_params[2]}"
  local _vm_name="${_hypervisor_params[3]}"
  local _vm_storage_l="${_hypervisor_params[4]}"
  local _random_value="${_hypervisor_params[5]}"

  _sprintf "head" "importing virtual machine"

  if [[ "$_vm_type" == "xen" ]] ; then

    local _arg=("extract ova ${_vm_name}.ova":"tar xf ${_vm_storage_l}/${_vm_name}/${_vm_name}.ova -C ${_vm_storage_l}/${_vm_name}" \
                "init xenmigrate for all Ref files":"cd ${_vm_storage_l}/${_vm_name} ; for i in $(find . -name \"Ref:*\") ; do _name=$(echo $i | tr \":\" \"_\") ; xenmigrate --convert=\"${i}\" \"${_name}.img\" ; done")

    for i in "${_arg[@]}" ; do

      _msg="${i%%:*}"
      _full_command="${i#*:}"

      _sprintf "info" "$_msg"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "$_msg"

      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  _STATE=$_state

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmConvertDisks()
#
# Description:
#   Converts the virtual machine.
#
# Usage:
#   VmConvertDisks _conn_params[@] _hypervisor_params[@]
#
# Examples:
#   VmConvertDisks _conn_params[@] _hypervisor_params[@]
#

function VmConvertDisks() {

  local _FUNCTION_ID="VmConvertDisks"
  local _STATE=0

  local _conn_params=("${!1}")
  local _hypervisor_params=("${!2}")

  local _socket="${_conn_params[0]}@${_conn_params[1]}"
  local _port="${_conn_params[2]}"

  local _vm_type="${_hypervisor_params[0]}"
  local _vm_storage_r="${_hypervisor_params[1]}"
  local _vm_id="${_hypervisor_params[2]}"
  local _vm_name="${_hypervisor_params[3]}"
  local _vm_storage_l="${_hypervisor_params[4]}"
  local _random_value="${_hypervisor_params[5]}"

  _sprintf "head" "converting disks"

  if [[ "$_vm_type" == "xen" ]] ; then

    local _arg=("to qcow2 format":"cd ${_vm_storage_l}/${_vm_name} ; for _name in $(find . -name \"Ref_*\") ; do _nname=${_name%.*} ; qemu-img convert -f raw -O qcow2 \"${_name}\" \"${_nname}.qcow2\" ; done")

    for i in "${_arg[@]}" ; do

      _msg="${i%%:*}"
      _full_command="${i#*:}"

      _sprintf "info" "$_msg"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "$_msg"

      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  _STATE=$_state

  return $_STATE

}
