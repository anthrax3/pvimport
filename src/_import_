################################################################################
######################## Definitions of user variables #########################
################################################################################


################################################################################
######################## Definitions of user functions #########################
################################################################################

# ``````````````````````````````````````````````````````````````````````````````
# Function name: InitPv()
#
# Description:
#   Enables the environment for other functions.
#
# Usage:
#   InitPv "param_0" "param_1"
#
# Examples:
#   InitPv _conn_params[@] _hypervisor_params[@]
#

function InitPv() {

  local _FUNCTION_ID="InitPv"
  local _STATE=0

  local _conn_params=("${!1}")
  local _hypervisor_params=("${!2}")

  local _socket="${_conn_params[0]}@${_conn_params[1]}"
  local _port="${_conn_params[2]}"

  local _vm_type="${_hypervisor_params[0]}"
  local _vm_storage_r="${_hypervisor_params[1]}"
  local _vm_id="${_hypervisor_params[2]}"
  local _vm_name="${_hypervisor_params[3]}"
  local _vm_storage_l="${_hypervisor_params[4]}"
  local _random_value="${_hypervisor_params[5]}"

  _sprintf "head" "init env for pvimport"

  _logger "info" \
    "$_FUNCTION_ID()" \
    "init env for pvimport"

  # Functions stack description:
  #   CheckConn       - check the connection to the server
  #   VmExport        - export Virtual Machine
  #   VmCopy          - copy Virtual Machine
  #   VmExtract       - extract Virtual Machine disks
  #   VmConvertDisks  - convert Virtual Machine
  #   VmImport        - import Virtual Machine

  local _function_stack=(CheckConn VmExport VmCopy VmExtract VmConvertDisks)

  for i in "${_function_stack[@]}" ; do ${i} ; if [ ! $? ] ; then _exit_ 255 ; fi ; done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: CheckConn()
#
# Description:
#   Validates the connection to the remote server.
#
# Usage:
#   CheckConn "param"
#
# Examples:
#   CheckConn _conn_params[@]
#

function CheckConn() {

  local _FUNCTION_ID="CheckConn"
  local _STATE=0

  _sprintf "head" "checking connection to remote host"

  _logger "info" \
    "$_FUNCTION_ID()" \
    "checking connection to remote host"

  local _arg=(\
  "testing ${_socket%%:*}":"wait-for-it -h ${_socket%%:*} -p ${_socket##*:} -t 5 -q")

  for i in "${_arg[@]}" ; do

    _msg="${i%%:*}"
    _full_command="${i#*:}"

    _sprintf "info" "$_msg"

    _logger "info" \
      "$_FUNCTION_ID()" \
      "$_msg"

    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmExport()
#
# Description:
#   Exports the virtual machine.
#
# Usage:
#   VmExport "param_0" "param_1"
#
# Examples:
#   VmExport _conn_params[@] _hypervisor_params[@]
#

function VmExport() {

  local _FUNCTION_ID="VmExport"
  local _STATE=0

  _sprintf "head" "exporting a virtual machine ($r_hypervisor_type)"

  local _arg=(\
  "create snapshot for ${_vm_id}":"ssh ${_socket} -p ${_port} _id=\$(xe vm-snapshot vm=${_vm_id} new-name-label=${_vm_name}-${_random_value}) ; echo \$_id > ${_pv_vars}" \
  "export snapshot for ${_vm_id}":"ssh ${_socket} -p ${_port} _id=\$(cat ${_pv_vars}) ; xe vm-export vm=\${_id} filename=${_vm_storage_r}/${_vm_name}.ova")

  if [[ "$_vm_type" == "xen" ]] ; then

    for i in "${_arg[@]}" ; do

      _msg="${i%%:*}"
      _full_command="${i#*:}"

      _sprintf "info" "$_msg"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "$_msg"

      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmCopy()
#
# Description:
#   Copies the virtual machine from remote host to local (target) host.
#
# Usage:
#   VmCopy "param_0" "param_1"
#
# Examples:
#   VmCopy _conn_params[@] _hypervisor_params[@]
#

function VmCopy() {

  local _FUNCTION_ID="VmCopy"
  local _STATE=0

  _sprintf "head" "copying a virtual machine"

  local _arg=(\
  "${_vm_name}.ova to ${_vm_storage_l}/${_vm_name}":"scp -P ${_port} ${_socket}:${_vm_storage_r}/${_vm_name}.ova ${_vm_storage_l}/${_vm_name}")

  if [[ "$_vm_type" == "xen" ]] ; then

    if [[ ! -d "${_vm_storage_l}/${_vm_name}" ]] ; then

      _sprintf "info" "create a local directory: ${_vm_storage_l}/${_vm_name}"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "create a local directory: ${_vm_storage_l}/${_vm_name}"

      mkdir ${_vm_storage_l}/${_vm_name}

    fi

    for i in "${_arg[@]}" ; do

      _msg="${i%%:*}"
      _full_command="${i#*:}"

      _sprintf "info" "$_msg"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "$_msg"

      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmExtract()
#
# Description:
#   Extracts the virtual machine disks.
#
# Usage:
#   VmExtract "param_0" "param_1"
#
# Examples:
#   VmExtract _conn_params[@] _hypervisor_params[@]
#

function VmExtract() {

  local _FUNCTION_ID="VmExtract"
  local _STATE=0

  _sprintf "head" "extracting ova disks (only for xen)"

  if [[ "$_vm_type" == "xen" ]] ; then

    local _arg=(\
    "for ${_vm_name}.ova":"tar xf ${_vm_storage_l}/${_vm_name}/${_vm_name}.ova -C ${_vm_storage_l}/${_vm_name}")

    for i in "${_arg[@]}" ; do

      _msg="${i%%:*}"
      _full_command="${i#*:}"

      _sprintf "info" "$_msg"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "$_msg"

      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  _STATE=$_state

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmConvertDisks()
#
# Description:
#   Converts the virtual machine.
#
# Usage:
#   VmConvertDisks "param_0" "param_1"
#
# Examples:
#   VmConvertDisks _conn_params[@] _hypervisor_params[@]
#

function VmConvertDisks() {

  local _FUNCTION_ID="VmConvertDisks"
  local _STATE=0

  _sprintf "head" "converting to qcow2 format"

  if [[ "$_vm_type" == "xen" ]] ; then

    local _arg=(\
    "convert 'Ref' files to img format":"eval cd ${_vm_storage_l}/${_vm_name} ; for i in \$(find . -name \"Ref:*\") ; do _name=\$(echo \${i} | tr \":\" \"_\") ; xenmigrate --convert=\"\${i}\" \"\${_name}.img\" ; done" \
    "convert 'img' files to qcow2 format":"eval cd ${_vm_storage_l}/${_vm_name} ; for _name in \$(find . -name \"Ref_*\") ; do _nname=\${_name%.*} ; qemu-img convert -f raw -O qcow2 \"\${_name}\" \"\${_nname}.qcow2\" ; done")

    for i in "${_arg[@]}" ; do

      _msg="${i%%:*}"
      _full_command="${i#*:}"

      _sprintf "info" "$_msg"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "$_msg"

      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  _STATE=$_state

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmImport()
#
# Description:
#   Imports the virtual machine.
#
# Usage:
#   VmImport "param_0" "param_1"
#
# Examples:
#   VmImport _conn_params[@] _hypervisor_params[@]
#

function VmImport() {

  local _FUNCTION_ID="VmImport"
  local _STATE=0

  _sprintf "head" "importing a virtual machine (proxmox)"

  if [[ "$_vm_type" == "xen" ]] ; then

    local _arg=(\
    "extracting ${_vm_name}.ova":"tar xf ${_vm_storage_l}/${_vm_name}/${_vm_name}.ova -C ${_vm_storage_l}/${_vm_name}" \
    "convert 'Ref' files to img format":"eval cd ${_vm_storage_l}/${_vm_name} ; for i in \$(find . -name \"Ref:*\") ; do _name=\$(echo \${i} | tr \":\" \"_\") ; xenmigrate --convert=\"\${i}\" \"\${_name}.img\" ; done")

    for i in "${_arg[@]}" ; do

      _msg="${i%%:*}"
      _full_command="${i#*:}"

      _sprintf "info" "$_msg"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "$_msg"

      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  _STATE=$_state

  return $_STATE

}
