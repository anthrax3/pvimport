################################################################################
######################## Definitions of user variables #########################
################################################################################


################################################################################
######################## Definitions of user functions #########################
################################################################################

# ``````````````````````````````````````````````````````````````````````````````
# Function name: rCheckConn()
#
# Description:
#   Validates the connection to the remote server.
#
# Usage:
#   rCheckConn "host" "port"
#
# Examples:
#   rCheckConn "$l_host" "$l_port"
#

function rCheckConn() {

  local _FUNCTION_ID="rCheckConn"
  local _STATE=0

  local _conn_params=("${!1}")

  local _socket="${_conn_params[1]}:${_conn_params[2]}"
  local _timeout="${_conn_params[3]}"

  _sprintf "head" "connection to ${_socket}"

  _logger "info" \
    "$_FUNCTION_ID()" \
    "connection to ${_socket}"

  for i in \
  "wait-port -o silent ${_socket%%:*}:${_socket##*:}" ; do

    _full_command="$i"
  
    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: rVmExport()
#
# Description:
#   Exports the virtual machine.
#
# Usage:
#   rVmExport
#
# Examples:
#   rVmExport
#

function rVmExport() {

  local _FUNCTION_ID="rVmExport"
  local _STATE=0

  local _conn_params=("${!1}")
  local _hypervisor_params=("${!2}")

  local _socket="${_conn_params[0]}@${_conn_params[1]}"
  local _port="${_conn_params[2]}"

  local _vm_type="${_hypervisor_params[0]}"
  local _vm_storage_r="${_hypervisor_params[1]}"
  local _vm_id="${_hypervisor_params[2]}"
  local _vm_dump="${_hypervisor_params[3]}"

  _sprintf "head" "export virtual machine"

  _sprintf "info" "hv type: $_vm_type"
  _sprintf "info" "remote storage: $_vm_storage_r"
  _sprintf "info" "vm id: $_vm_id"
  _sprintf "info" "output file: $_vm_dump"

  if [[ "$_vm_type" == "xen" ]] ; then

    for i in \
    "ssh ${_socket} -p ${_port} _id=\$(xe vm-snapshot vm=${_vm_id} new-name-label=${_vm_dump}-snap) ; echo \$_id > ${_pv_vars}" \
    "ssh ${_socket} -p ${_port} _id=\$(cat ${_pv_vars}) ; xe vm-export vm=\${_id} filename=${_vm_storage_r}/${_vm_dump}.ova ; >${_pv_vars}" ; do

      _full_command="$i"
  
      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: rVmImport()
#
# Description:
#   Imports the virtual machine.
#
# Usage:
#   rVmImport
#
# Examples:
#   rVmImport
#

function lVmImport() {

  local _FUNCTION_ID="lVmImport"
  local _STATE=0

  local _conn_params=("${!1}")
  local _hypervisor_params=("${!2}")

  local _socket="${_conn_params[0]}@${_conn_params[1]}"
  local _port="${_conn_params[2]}"

  local _vm_type="${_hypervisor_params[0]}"
  local _vm_storage_r="${_hypervisor_params[1]}"
  local _vm_id="${_hypervisor_params[2]}"
  local _vm_dump="${_hypervisor_params[3]}"
  local _vm_storage_l="${_hypervisor_params[4]}"

  _sprintf "head" "import virtual machine"

  _sprintf "info" "hv type: $_vm_type"
  _sprintf "info" "local storage: $_vm_storage_l"
  _sprintf "info" "remote storage: $_vm_storage_r"
  _sprintf "info" "output file: $_vm_dump"

  if [[ "$_vm_type" == "xen" ]] ; then

    mkdir ${_vm_storage_l}/${_vm_dump}

    for i in \
    "scp -P ${_port} ${_socket}:${_vm_storage_r}/${_vm_dump}.ova ${_vm_storage_l}/${_vm_dump}" ; do

      _full_command="$i"
  
      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  _STATE=$_state

  return $_STATE

}
