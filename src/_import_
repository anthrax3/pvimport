################################################################################
######################## Definitions of user variables #########################
################################################################################


################################################################################
######################## Definitions of user functions #########################
################################################################################

# ``````````````````````````````````````````````````````````````````````````````
# Function name: InitPv()
#
# Description:
#   Initialization of the environment for other functions.
#
# Usage:
#   InitPv "param_0" "param_1"
#
# Examples:
#   InitPv _conn_params[@] _hypervisor_params[@]
#

function InitPv() {

  local _FUNCTION_ID="InitPv"
  local _STATE=0

  local _conn_params=("${!1}")
  local _hypervisor_params=("${!2}")

  local _socket="${_conn_params[0]}@${_conn_params[1]}"
  local _port="${_conn_params[2]}"

  local _vm_type="${_hypervisor_params[0]}"
  local _vm_storage_r="${_hypervisor_params[1]}"
  local _vm_id="${_hypervisor_params[2]}"
  local _vm_name="${_hypervisor_params[3]}"
  local _vm_storage_l="${_hypervisor_params[4]}"
  local _vm_pv_storage_l="${_hypervisor_params[5]}"
  local _vm_pv_id_l="${_hypervisor_params[6]}"
  local _vm_pv_disk_format="${_hypervisor_params[7]}"
  local _vm_pv_disk_move="${_hypervisor_params[8]}"

  local _local_path="${_vm_storage_l}/${_socket#*@}/${_vm_name}"
  local _local_path_pv="${_vm_pv_storage_l}/${_vm_pv_id_l}"

  _sprintf "head" "creating local environment"

  _logger "info" \
    "${_FUNCTION_ID}()" \
    "creating local environment"

  for i in "_socket" \
           "_port" \
           "_vm_type" \
           "_vm_storage_r" \
           "_vm_id" \
           "_vm_name" \
           "_vm_storage_l" \
           "_local_path" \
           "_vm_pv_storage_l" \
           "_vm_pv_id_l" \
           "_vm_pv_disk_format" \
           "_vm_pv_disk_move" ; do

    eval _y='$'${i}
    _sprintf "info" "${i}: '${_y}'"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "${i}: '$_y'"

  done

  # Functions stack description:
  #   CheckConn       - check the connection to the server (xen/vmware)
  #   InitRemoteEnv   - creates a remote environment (xen/vmware)
  #   CheckRemoteEnv  - checks a remote environment (xen/vmware)
  #   VmExport        - export Virtual Machine (xen)
  #   VmCopy          - copy Virtual Machine (xen/vmware)
  #   VmExtract       - extract Virtual Machine disks (xen)
  #   VmConvertDisks  - convert Virtual Machine (xen/vmware)
  #   VmImport        - import Virtual Machine (xen/vmware)

  if [[ "$_vm_type" == "xen" ]] ; then

    local _function_stack=(CheckConn InitRemoteEnv CheckRemoteEnv VmExport VmCopy VmExtract VmConvertDisks)

  elif [[ "$_vm_type" == "vmware" ]] ; then

    local _function_stack=(CheckConn InitRemoteEnv CheckRemoteEnv VmCopy VmConvertDisks)

  else

    _sprintf "stop" "incorrectly set hypervisor type (properly: xen or vmware)"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "incorrectly set hypervisor type (properly: xen or vmware)"

  fi

  if [[ "$_vm_pv_disk_move" -eq 1 ]] ; then

    _function_stack+=(VmImport)

  fi

  for i in "${_function_stack[@]}" ; do $i ; if [ ! $? ] ; then _exit_ 255 ; fi ; done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: CheckConn()
#
# Description:
#   Validates the connection to the remote server.
#
# Usage:
#   CheckConn
#
# Examples:
#   CheckConn
#

function CheckConn() {

  local _FUNCTION_ID="CheckConn"
  local _STATE=0

  _sprintf "head" "checking connection"

  _logger "info" \
    "${_FUNCTION_ID}()" \
    "checking connection"

  local _arg=(\
  "to host: '${_socket#*@}'"^"wait-for-it -h ${_socket#*@} -p ${_port} -t 5 -q")

  for i in "${_arg[@]}" ; do

    _msg="${i%%^*}"
    _full_command="${i#*^}"

    _sprintf "info" "$_msg"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "$_msg"

    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: InitRemoteEnv()
#
# Description:
#   Initialization of the remote environment.
#
# Usage:
#   InitRemoteEnv
#
# Examples:
#   InitRemoteEnv
#

function InitRemoteEnv() {

  local _FUNCTION_ID="InitRemoteEnv"
  local _STATE=0

  _sprintf "head" "creating remote environment"

  _logger "info" \
    "${_FUNCTION_ID}()" \
    "creating remote environment"

  local _arg=(\
  "resetting '$_pv_vars'"^"ssh ${_socket} -p ${_port} >${_pv_vars}")

  for i in "${_arg[@]}" ; do

    _msg="${i%%^*}"
    _full_command="${i#*^}"

    _sprintf "info" "$_msg"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "$_msg"

    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: CheckRemoteEnv()
#
# Description:
#   Checks of the remote environment.
#
# Usage:
#   CheckRemoteEnv
#
# Examples:
#   CheckRemoteEnv
#

function CheckRemoteEnv() {

  local _FUNCTION_ID="CheckRemoteEnv"
  local _STATE=0

  _sprintf "head" "checking remote variables"

  _logger "info" \
    "${_FUNCTION_ID}()" \
    "checking remote variables"

  if [[ "$_vm_type" == "xen" ]] ; then

    local _arg=(\
    "directory exist: '${_vm_storage_r}'"^"ssh ${_socket} -p ${_port} if [[ ! -d \"${_vm_storage_r}\" ]] ; then exit 1 ; fi" \
    "vm exist: '${_vm_id}'"^"ssh ${_socket} -p ${_port} if [[ ! \$(xe vm-list | grep ${_vm_id}) ]] ; then exit 1 ; fi")

  elif [[ "$_vm_type" == "vmware" ]] ; then

    local _arg=(\
    "directory exist: '${_vm_storage_r}'"^"ssh ${_socket} -p ${_port} if [[ ! -d \"${_vm_storage_r}\" ]] ; then exit 1 ; fi" \
    "vm exist: '${_vm_id}'"^"ssh ${_socket} -p ${_port} if [[ ! \$(vim-cmd vmsvc/getallvms | grep ${_vm_id}) ]] ; then exit 1 ; fi")

  fi

  for i in "${_arg[@]}" ; do

    _msg="${i%%^*}"
    _full_command="${i#*^}"

    _sprintf "info" "$_msg"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "$_msg"

    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmExport()
#
# Description:
#   Exports the virtual machine.
#
# Usage:
#   VmExport
#
# Examples:
#   VmExport
#

function VmExport() {

  local _FUNCTION_ID="VmExport"
  local _STATE=0

  _sprintf "head" "exporting $_vm_id"

  _logger "info" \
    "${_FUNCTION_ID}()" \
    "exporting $_vm_id"

  local _arg=(\
  "create snapshot: '${_vm_name}-${_random}'"^"ssh ${_socket} -p ${_port} _id=\$(xe vm-snapshot vm=${_vm_id} new-name-label=${_vm_name}-${_random}) ; echo id=\$_id >> ${_pv_vars}" \
  "export snapshot: '${_vm_name}.ova'"^"ssh ${_socket} -p ${_port} _id=\$(cat ${_pv_vars} | grep id= | cut -d = -f2) ; xe vm-export vm=\${_id} filename=${_vm_storage_r}/${_vm_name}.ova")

  for i in "${_arg[@]}" ; do

    _msg="${i%%^*}"
    _full_command="${i#*^}"

    _sprintf "info" "$_msg"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "$_msg"

    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmCopy()
#
# Description:
#   Copies the virtual machine from remote host to local (target) host.
#
# Usage:
#   VmCopy
#
# Examples:
#   VmCopy
#

function VmCopy() {

  local _FUNCTION_ID="VmCopy"
  local _STATE=0

  _sprintf "head" "copying a virtual machine disks"

  _logger "info" \
    "${_FUNCTION_ID}()" \
    "copying a virtual machine disks"

  if [[ ! -d "$_local_path" ]] ; then

    _sprintf "info" "create a local directory: '$_local_path'"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "create a local directory: '$_local_path'"

    mkdir -p "$_local_path"

  fi

  if [[ "$_vm_type" == "xen" ]] ; then

    local _arg=(\
    "src: '${_vm_name}.ova', dst path: '${_local_path}'"^"scp -P ${_port} ${_socket}:${_vm_storage_r}/${_vm_name}.ova ${_local_path}")

  elif [[ "$_vm_type" == "vmware" ]] ; then

    local _arg=(\
    "src: '*.vmdk', dst path: '${_local_path}'"^"scp -P ${_port} ${_socket}:${_vm_storage_r}/${_vm_name}/*.vmdk ${_local_path}")

  fi

  for i in "${_arg[@]}" ; do

    _msg="${i%%^*}"
    _full_command="${i#*^}"

    _sprintf "info" "$_msg"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "$_msg"

    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmExtract()
#
# Description:
#   Extracts the virtual machine disks.
#
# Usage:
#   VmExtract
#
# Examples:
#   VmExtract
#

function VmExtract() {

  local _FUNCTION_ID="VmExtract"
  local _STATE=0

  _sprintf "head" "extracting ova files"

  _logger "info" \
    "${_FUNCTION_ID}()" \
    "extracting ova files"

  local _arg=(\
  "src: '${_vm_name}.ova', dst path: '${_local_path}'"^"tar xf ${_local_path}/${_vm_name}.ova -C ${_local_path}")

  for i in "${_arg[@]}" ; do

    _msg="${i%%^*}"
    _full_command="${i#*^}"

    _sprintf "info" "$_msg"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "$_msg"

    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmConvertDisks()
#
# Description:
#   Converts the virtual machine disks.
#
# Usage:
#   VmConvertDisks
#
# Examples:
#   VmConvertDisks
#

function VmConvertDisks() {

  local _FUNCTION_ID="VmConvertDisks"
  local _STATE=0

  _sprintf "head" "converting disks to $_vm_pv_disk_format format"

  _logger "info" \
    "${_FUNCTION_ID}()" \
    "converting disks to $_vm_pv_disk_format format"

  if [[ "$_vm_type" == "xen" ]] ; then

    if [[ "$_vm_pv_disk_format" == "img" ]] ; then

      local _arg=(\
      "src: 'Ref:*', dst path: '${_local_path}'"^"eval cd ${_local_path} ; for i in \$(find . -name \"Ref:*\") ; do _name=\$(echo \${i} | tr \":\" \"_\") ; xenmigrate --convert=\"\${i}\" \"\${_name}.img\" ; done")

    elif [[ "$_vm_pv_disk_format" == "qcow2" ]] ; then

      local _arg=(\
      "src: 'Ref:*', dst path: '${_local_path}'"^"eval cd ${_local_path} ; for i in \$(find . -name \"Ref:*\") ; do _name=\$(echo \${i} | tr \":\" \"_\") ; xenmigrate --convert=\"\${i}\" \"\${_name}.img\" ; done" \
      "src: 'Ref_*.img', dst path: '${_local_path}'"^"eval cd ${_local_path} ; for _name in \$(find . -name \"Ref_*\") ; do _nname=\${_name%.*} ; qemu-img convert -f raw -O qcow2 \"\${_name}\" \"\${_nname}.qcow2\" ; done")

    fi

  elif [[ "$_vm_type" == "vmware" ]] ; then

    if [[ "$_vm_pv_disk_format" == "img" ]] ; then

      local _arg=(\
      "src: '*.vmdk', dst path: '${_local_path}'"^"eval cd ${_local_path} ; for _name in \$(find . -name \"*.vmdk\" | grep -v \"flat\") ; do _nname=\${_name%.*} ; qemu-img convert -f vmdk -O raw \"\${_name}\" \"\${_nname}.img\" ; done")

    elif [[ "$_vm_pv_disk_format" == "qcow2" ]] ; then

      local _arg=(\
      "src: '*.vmdk', dst path: '${_local_path}'"^"eval cd ${_local_path} ; for _name in \$(find . -name \"*.vmdk\" | grep -v \"flat\") ; do _nname=\${_name%.*} ; qemu-img convert -f vmdk -O qcow2 \"\${_name}\" \"\${_nname}.qcow2\" ; done")

    fi

  fi

  for i in "${_arg[@]}" ; do

    _msg="${i%%^*}"
    _full_command="${i#*^}"

    _sprintf "info" "$_msg"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "$_msg"

    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmImport()
#
# Description:
#   Imports the virtual machine.
#
# Usage:
#   VmImport
#
# Examples:
#   VmImport
#

function VmImport() {

  local _FUNCTION_ID="VmImport"
  local _STATE=0

  _sprintf "head" "importing a virtual machine disks"

  _logger "info" \
    "${_FUNCTION_ID}()" \
    "importing a virtual machine disks"

  if [[ "$_vm_type" == "xen" ]] ; then

    if [[ "$_vm_pv_disk_format" == "img" ]] ; then

      local _arg=(\
      "not used"^"true")

    elif [[ "$_vm_pv_disk_format" == "qcow2" ]] ; then

      local _arg=(\
      "src: '*.${_vm_pv_disk_format}', dst path: '${_local_path_pv}'"^"eval cd ${_local_path} ; _x=1 ; for i in \$(find . -name \"*.${_vm_pv_disk_format}\" | sort) ; do cp \$i ${_local_path_pv}/vm-${_vm_pv_id_l}-disk-${_x}.${_vm_pv_disk_format} ; ((_x++)) ; done")

    fi

  elif [[ "$_vm_type" == "vmware" ]] ; then

    if [[ "$_vm_pv_disk_format" == "img" ]] ; then

      local _arg=(\
      "not used"^"true")

    elif [[ "$_vm_pv_disk_format" == "qcow2" ]] ; then

      local _arg=(\
      "src: '*.${_vm_pv_disk_format}', dst path: '${_local_path_pv}'"^"eval cd ${_local_path} ; _x=1 ; for i in \$(find . -name \"*.${_vm_pv_disk_format}\" | sort) ; do cp \$i ${_local_path_pv}/vm-${_vm_pv_id_l}-disk-${_x}.${_vm_pv_disk_format} ; ((_x++)) ; done")

    fi

  fi

  for i in "${_arg[@]}" ; do

    _msg="${i%%^*}"
    _full_command="${i#*^}"

    _sprintf "info" "$_msg"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "$_msg"

    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}
