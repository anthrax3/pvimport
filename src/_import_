################################################################################
######################## Definitions of user variables #########################
################################################################################


################################################################################
######################## Definitions of user functions #########################
################################################################################

# ``````````````````````````````````````````````````````````````````````````````
# Function name: CheckConn()
#
# Description:
#   Validates the connection to the remote server.
#
# Usage:
#   CheckConn "host" "port"
#
# Examples:
#   CheckConn "$l_host" "$l_port"
#

function CheckConn() {

  local _FUNCTION_ID="CheckConn"
  local _STATE=0

  local _conn_params=("${!1}")

  local _socket="${_conn_params[1]}:${_conn_params[2]}"
  local _timeout="${_conn_params[3]}"

  _sprintf "head" "testing connection"

  _logger "info" \
    "$_FUNCTION_ID()" \
    "testing connection"

  local _arg=("check ${_socket}":"wait-for-it -h ${_socket%%:*} -p ${_socket##*:} -t 5 -q")
  for i in "${_arg[@]}" ; do

    _msg="${i%%:*}"
    _full_command="${i##*:}"
  
    _sprintf "info" "$_msg"

    _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmExport()
#
# Description:
#   Exports the virtual machine.
#
# Usage:
#   VmExport
#
# Examples:
#   VmExport
#

function VmExport() {

  local _FUNCTION_ID="VmExport"
  local _STATE=0

  local _conn_params=("${!1}")
  local _hypervisor_params=("${!2}")

  local _socket="${_conn_params[0]}@${_conn_params[1]}"
  local _port="${_conn_params[2]}"

  local _vm_type="${_hypervisor_params[0]}"
  local _vm_storage_r="${_hypervisor_params[1]}"
  local _vm_id="${_hypervisor_params[2]}"
  local _vm_dump="${_hypervisor_params[3]}"

  _sprintf "head" "export virtual machine"

  _sprintf "info" "hv type: $_vm_type"
  _sprintf "info" "remote storage: $_vm_storage_r"
  _sprintf "info" "vm id: $_vm_id"
  _sprintf "info" "output file: $_vm_dump"

  if [[ "$_vm_type" == "xen" ]] ; then

    for i in \
    "ssh ${_socket} -p ${_port} _id=\$(xe vm-snapshot vm=${_vm_id} new-name-label=${_vm_dump}-snap) ; echo \$_id > ${_pv_vars}" \
    "ssh ${_socket} -p ${_port} _id=\$(cat ${_pv_vars}) ; xe vm-export vm=\${_id} filename=${_vm_storage_r}/${_vm_dump}.ova" ; do

      _full_command="$i"
  
      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmImport()
#
# Description:
#   Imports the virtual machine.
#
# Usage:
#   VmImport
#
# Examples:
#   VmImport
#

function VmImport() {

  local _FUNCTION_ID="VmImport"
  local _STATE=0

  local _conn_params=("${!1}")
  local _hypervisor_params=("${!2}")

  local _socket="${_conn_params[0]}@${_conn_params[1]}"
  local _port="${_conn_params[2]}"

  local _vm_type="${_hypervisor_params[0]}"
  local _vm_storage_r="${_hypervisor_params[1]}"
  local _vm_id="${_hypervisor_params[2]}"
  local _vm_dump="${_hypervisor_params[3]}"
  local _vm_storage_l="${_hypervisor_params[4]}"

  _sprintf "head" "import virtual machine"

  _sprintf "info" "hv type: $_vm_type"
  _sprintf "info" "local storage: $_vm_storage_l"
  _sprintf "info" "remote storage: $_vm_storage_r"
  _sprintf "info" "output file: $_vm_dump"

  if [[ "$_vm_type" == "xen" ]] ; then

    if [[ ! -d "${_vm_storage_l}" ]] ; then

      _sprintf "stop" "local directory is not exist ($_vm_storage_l}"

      _logger "stop" \
        "$_FUNCTION_ID()" \
        "local directory is not exist ($_vm_storage_l}"

    fi

    mkdir ${_vm_storage_l}/${_vm_dump}

    for i in \
    "scp -P ${_port} ${_socket}:${_vm_storage_r}/${_vm_dump}.ova ${_vm_storage_l}/${_vm_dump}" \
    "tar xf ${_vm_storage_l}/${_vm_dump}/${_vm_dump}.ova -C ${_vm_storage_l}/${_vm_dump}" \
    "cd ${_vm_storage_l}/${_vm_dump} ; for i in $(find . -name \"Ref:*\") ; do _name=$(echo $i | tr \":\" \"_\") ; xenmigrate --convert=\"${i}\" \"${_name}.img\" ; done" ; do

      _full_command="$i"
  
      _init_cmd "$_full_command" ; if [ ! $? ] ; then _STATE=$? ; fi

    done

  fi

  _STATE=$_state

  return $_STATE

}
