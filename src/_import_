################################################################################
######################## Definitions of user variables #########################
################################################################################

# Output logfile from pg commands.
_output_err="${logdir}/output.err"


################################################################################
######################## Definitions of user functions #########################
################################################################################

# ``````````````````````````````````````````````````````````````````````````````
# Function name: rCheckConn()
#
# Description:
#   Validates the connection to the remote server.
#
# Usage:
#   rCheckConn "host" "port"
#
# Examples:
#   rCheckConn "$l_host" "$l_port"
#

function rCheckConn() {

  local _FUNCTION_ID="rCheckConn"
  local _STATE=0

  local _conn_params=("${!1}")

  local _socket="${_conn_params[1]}:${_conn_params[2]}"
  local _timeout="${_conn_params[3]}"

  _sprintf "head" "connection to ${_socket}"

  _logger "info" \
    "$_FUNCTION_ID()" \
    "connection to ${_socket}"

  (timeout "$_timeout" bash -c "cat < /dev/null > /dev/tcp/${_socket%%:*}/${_socket##*:} 2> $_output_err") &
  # We keep pid of the last command.
  _pid=$!

  # When the '(command) &' command is performed.
  _sprintf "spin" "$_pid"

  # Very important line:
  # We define the state of the output job from the background.
  wait $_pid &>/dev/null && _state="0" || _state="1"

  if [[ "$_state" -eq "0" ]] ; then

    _sprintf "info" "state: established"

    _logger "info" \
      "$_FUNCTION_ID()" \
      "state: established"

  else

    _sprintf "stop" "state: not established"

    _logger "stop" \
      "$_FUNCTION_ID()" \
      "state: not established"

  fi

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: rVmExport()
#
# Description:
#   Exports the virtual machine.
#
# Usage:
#   rVmExport
#
# Examples:
#   rVmExport
#

function rVmExport() {

  local _FUNCTION_ID="rVmExport"
  local _STATE=0

  local _conn_params=("${!1}")
  local _hypervisor_params=("${!2}")

  local _socket="${_conn_params[0]}@${_conn_params[1]}"
  local _port="${_conn_params[2]}"

  local _vm_type="${_hypervisor_params[0]}"
  local _vm_storage="${_hypervisor_params[1]}"

  _sprintf "head" "export virtual machine"

  _sprintf "info" "vm type: $_vm_type"
  _sprintf "info" "vm storage: $_vm_storage"

  ssh ${_socket} -p ${_port} "touch /tmp/file.prox01"

  _logger "info" \
    "$_FUNCTION_ID()" \
    "export vm"

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: rVmImport()
#
# Description:
#   Imports the virtual machine.
#
# Usage:
#   rVmImport
#
# Examples:
#   rVmImport
#

function rVmImport() {

  local _FUNCTION_ID="rVmImport"
  local _STATE=0

  local _conn_params=("${!1}")

  local _socket="${_conn_params[0]}:${_conn_params[1]}"
  local _timeout="${_conn_params[2]}"

  _sprintf "head" "import vm"

  _logger "info" \
    "$_FUNCTION_ID()" \
    "import vm"

  return $_STATE

}
