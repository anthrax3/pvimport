#!/usr/bin/env bash

################################################################################
######################## Definitions of user variables #########################
################################################################################


################################################################################
######################## Definitions of user functions #########################
################################################################################

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmwareInit()
#
# Description:
#   Initialization of tasks for VMware ESXi.
#
# Usage:
#   VmwareInit
#
# Examples:
#   VmwareInit
#

function VmwareInit() {

  local _FUNCTION_ID="VmwareInit"
  local _STATE=0

  _sprintf "head" "flush configuration of remote environment"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "flush configuration of remote environment"

  _init "FlushRemoteFiles ${_pv_vmware_config}"
  _init "FlushRemoteFiles ${_pv_vmware_disks}"

  _sprintf "head" "check configuration of remote environment"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "check configuration of remote environment"

  _init "CheckRemoteStorage ${hv_storage}"
  _init "VmwareVmCheck ${vm_id}"

  _sprintf "head" "init configuration of remote environment"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "init configuration of remote environment"

  _init "VmwareInitCfg ${_pv_vmware_config} *.vmx"
  _init "VmwareInitCfg ${_pv_vmware_disks} *.vmdk"
  _init "VmwareVmStorageInit ${vm_id}"

  _sprintf "head" "dump configuration of remote environment"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "dump configuration of remote environment"

  _init "GetRemoteFiles ${_pv_vmware_config}"
  _init "GetRemoteFiles ${_pv_vmware_disks}"

  _sprintf "head" "copying a virtual machine disks"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "copying a virtual machine disks"

  # Issue to solve:
  # shellcheck disable=SC2013
  _fname=""
  for _fname in $(grep ".vmdk" "$_pv_vmware_disks" | cut -d "/" -f2) ; do

    _init "VmwareInitCfgRemoteVmDisks ${_fname}"

  done

  _sprintf "head" "converting disks to $pve_format format"

  _logger "head" \
    "${_FUNCTION_ID}()" \
    "converting disks to $pve_format format"

  _x=1

  # Issue to solve:
  # shellcheck disable=SC2013
  _fname=""
  for _fname in $(grep ".vmdk" "$_pv_vmware_disks" | cut -d "/" -f2) ; do

    _init "VmwareVmConvertDisks ${_fname}"

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmwareVmCheck()
#
# Description:
#   Checks of the VMware ESXi remote vm:
#     - virtual machine id/name
#
# Usage:
#   VmwareVmCheck vm_id
#
# Examples:
#   VmwareVmCheck PROD-web01
#

function VmwareVmCheck() {

  local _FUNCTION_ID="VmwareVmCheck"
  local _STATE=0

  local _vmid="$1"

  _msg_args+=(\
  "vm id: '${_vmid}'")

  _cmd_args+=(\
  "ssh ${ssh_opt} ${hv_host} -p ${port} if [[ ! \$(vim-cmd vmsvc/getallvms | grep ${_vmid}) ]] ; then exit 1 ; fi")

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmwareVmStorageInit()
#
# Description:
#   Checks of the VMware ESXi remote vm storage.
#
# Usage:
#   VmwareVmStorageInit vm_id
#
# Examples:
#   VmwareVmStorageInit PROD-web01
#

function VmwareVmStorageInit() {

  local _FUNCTION_ID="VmwareVmStorageInit"
  local _STATE=0

  local _vmid="$1"

  _msg_args+=(\
  "vm id: '${_vmid}'")

  _cmd_args+=(\
  "ssh ${ssh_opt} ${hv_host} -p ${port} vim-cmd vmsvc/getallvms | grep ${_vmid} | awk '{print \$4}' >>${_pv_vmware_config}")

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmwareInitCfg()
#
# Description:
#   Init configuration of remote environment.
#
# Usage:
#   VmwareInitCfg /path/to/config/file filter
#
# Examples:
#   VmwareInitCfg /tmp/.vmware.vars *.vmx
#

function VmwareInitCfg() {

  local _FUNCTION_ID="VmwareInitCfg"
  local _STATE=0

  local _file="$1"
  local _larg="$2"

  _msg_args+=(\
  "src: '${_file}")

  _cmd_args+=(\
  "ssh ${ssh_opt} ${hv_host} -p ${port} cd \"${re_path}\" && find . -name \"${_larg}\" >>${_file}")

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmwareInitCfgRemoteVmDisks()
#
# Description:
#   Copies the VMware ESXi virtual machine from remote host to local.
#
# Usage:
#   VmwareInitCfgRemoteVmDisks /path/to/remote/vmdk/disk
#
# Examples:
#   VmwareInitCfgRemoteVmDisks /vmfs/volume/datastore/PROD-web01/PROD-web01.vmdk
#

function VmwareInitCfgRemoteVmDisks() {

  local _FUNCTION_ID="VmwareInitCfgRemoteVmDisks"
  local _STATE=0

  local _fda="$1"

  _msg_args+=(\
  "checking: '${_fda}'" \
  "get src: '${_fda}'")

  _cmd_args+=(\
  "ssh ${ssh_opt} ${hv_host} -p ${port} if [[ ! -e \"${re_path}/${_fda}\" ]] ; then exit 1 ; fi" \
  "scp ${ssh_opt} -P ${port} ${hv_host}:${re_path}/${_fda} ${lo_path}")

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmwareVmConvertDisks()
#
# Description:
#   Converts the VMware ESXi virtual machine disks.
#
# Usage:
#   VmwareVmConvertDisks /path/to/local/vmdk/disk
#
# Examples:
#   VmwareVmConvertDisks /xfs900/datastore/vmware/PROD-web01.vmdk
#

function VmwareVmConvertDisks() {

  local _FUNCTION_ID="VmwareVmConvertDisks"
  local _STATE=0

  local _fdx="$1"

  local _fda
  local _fdb
  local _fdc

  # Store file name without extension (eg. vm).
  _fda=${_fdx%.*}

  if [[ "$_fdx" != *"flat"* ]] ; then

    if [[ "$pve_format" == "qcow2" ]] ; then

      # Store 'qcow2' file name (eg. 1-vm.qcow2).
      _fdb="${_x}-${_fda}.qcow2"

      _msg_args+=(\
      "checking: '${_fdx}'" \
      "src: '${_fdx}', dst: '${_fdb}'")

      _cmd_args+=(\
      "eval if [[ ! -e ${_fdx} ]] ; then exit 1 ; fi" \
      "qemu-img convert -f vmdk -O qcow2 ${_fdx} ${_fdb}")

    elif [[ "$pve_format" == "img" ]] ; then

      # Store 'img' file name (eg. 1-vm.img).
      _fdb="${_x}-${_fda}.img"

      _msg_args+=(\
      "checking: '${_fdx}'" \
      "src: '${_fdx}', dst: '${_fdb}'")

      _cmd_args+=(\
      "eval if [[ ! -e ${_fdx} ]] ; then exit 1 ; fi" \
      "qemu-img convert -f vmdk -O raw ${_fdx} ${_fdb}")

    fi

    if [[ "$remove_unused" == "yes" ]] ; then

      _msg_args+=(\
      "remove: '${_fdx}'")
      _cmd_args+=(\
      "rm -fr ${_fdx}")

      if [[ -e "${_fda}-flat.vmdk" ]] ; then

        _msg_args+=(\
        "remove: '${_fda}-flat.vmdk")
         _cmd_args+=(\
        "rm -fr ${_fda}-flat.vmdk")

      fi

    fi

    _x=$((_x + 1))

  fi

  return $_STATE

}
