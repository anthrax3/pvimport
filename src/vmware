#!/usr/bin/env bash

################################################################################
######################## Definitions of user variables #########################
################################################################################


################################################################################
######################## Definitions of user functions #########################
################################################################################

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmwareInit()
#
# Description:
#   Initialization of the remote VMware ESXi environment.
#
# Usage:
#   VmwareInit /path/to/config/file filter
#
# Examples:
#   VmwareInit /tmp/.vmware.vars *.vmx
#

function VmwareInit() {

  local _FUNCTION_ID="VmwareInit"
  local _STATE=0

  local _file="$1"
  local _larg="$2"

  _msg_args+=(\
  "src: '${_file}")

  _cmd_args+=(\
  "ssh ${ssh_opt} ${hv_host} -p ${port} cd \"${re_path}\" && find . -name \"${_larg}\" >>${_file}")

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmwareVmCheck()
#
# Description:
#   Checks of the VMware ESXi remote vm:
#     - virtual machine id/name
#
# Usage:
#   VmwareVmCheck vm_id
#
# Examples:
#   VmwareVmCheck PROD-web01
#

function VmwareVmCheck() {

  local _FUNCTION_ID="VmwareVmCheck"
  local _STATE=0

  local _vmid="$1"

  _msg_args+=(\
  "vm id: '${_vmid}'")

  _cmd_args+=(\
  "ssh ${ssh_opt} ${hv_host} -p ${port} if [[ ! \$(vim-cmd vmsvc/getallvms | grep ${_vmid}) ]] ; then exit 1 ; fi")

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmwareGetRemoteVmConfig()
#
# Description:
#   Dump of the VMware ESXi remote environment to local.
#
# Usage:
#   VmwareGetRemoteVmConfig /path/to/config/file
#
# Examples:
#   VmwareGetRemoteVmConfig /tmp/.vmware.vars
#

function VmwareGetRemoteVmConfig() {

  local _FUNCTION_ID="VmwareGetRemoteVmConfig"
  local _STATE=0

  local _file="$1"

  export _fvmx

  _sprintf "info" "set directory: '$lo_path'"

  cd "$lo_path" || \
  _logger "stop" \
    "${_FUNCTION_ID}()" \
    "directory change error: '$lo_path'"

  _fvmx=$(grep ".vmx" "$_file" | cut -d "/" -f2)

  _msg_args+=(\
  "checking: '${_fvmx}'" \
  "get src: '${_fvmx}'")

  _cmd_args+=(\
  "ssh ${ssh_opt} ${hv_host} -p ${port} if [[ ! -e \"${re_path}/${_file}\" ]] ; then exit 1 ; fi" \
  "scp ${ssh_opt} -P ${port} ${hv_host}:${re_path}/${_file} ${lo_path}")

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmwareGetRemoteVmDisks()
#
# Description:
#   Copies the virtual machine from remote hv_host to local (target).
#
# Usage:
#   VmwareGetRemoteVmDisks /path/to/remote/vmdk/disk
#
# Examples:
#   VmwareGetRemoteVmDisks /vmfs/volume/datastore/PROD-web01/PROD-web01.vmdk
#

function VmwareGetRemoteVmDisks() {

  local _FUNCTION_ID="VmwareGetRemoteVmDisks"
  local _STATE=0

  local _fda="$1"

  _sprintf "info" "set directory: '$lo_path'"

  cd "$lo_path" || \
  _logger "stop" \
    "${_FUNCTION_ID}()" \
    "directory change error: '$lo_path'"

  _msg_args+=(\
  "checking: '${_fda}'" \
  "get src: '${_fda}'")

  _cmd_args+=(\
  "ssh ${ssh_opt} ${hv_host} -p ${port} if [[ ! -e \"${re_path}/${_fda}\" ]] ; then exit 1 ; fi" \
  "scp ${ssh_opt} -P ${port} ${hv_host}:${re_path}/${_fda} ${lo_path}")

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: VmwareVmConvertDisks()
#
# Description:
#   Converts the virtual machine disks.
#
# Usage:
#   VmwareVmConvertDisks /path/to/local/vmdk/disk
#
# Examples:
#   VmwareVmConvertDisks /xfs900/datastore/vmware/PROD-web01.vmdk
#

function VmwareVmConvertDisks() {

  local _FUNCTION_ID="VmwareVmConvertDisks"
  local _STATE=0

  local _fdx="$1"

  local _fda
  local _fdb
  local _fdc

  local _x=1

  _sprintf "info" "set directory: '$lo_path'"

  cd "$lo_path" || \
  _logger "stop" \
    "${_FUNCTION_ID}()" \
    "directory change error: '$lo_path'"

  # Store file name without extension (eg. vm).
  _fda=${_fdx%.*}

  if [[ "$_fdx" != *"flat"* ]] ; then

    if [[ "$pve_format" == "qcow2" ]] ; then

      # Store 'qcow2' file name (eg. 1-vm.qcow2).
      _fdb="${_x}-${_fda}.qcow2"

      _msg_args+=(\
      "checking: '${_fdx}'" \
      "src: '${_fdx}', dst: '${_fdb}'")

      _cmd_args+=(\
      "eval if [[ ! -e ${_fdx} ]] ; then exit 1 ; fi" \
      "qemu-img convert -f vmdk -O qcow2 ${_fdx} ${_fdb}")

    elif [[ "$pve_format" == "img" ]] ; then

      # Store 'img' file name (eg. 1-vm.img).
      _fdb="${_x}-${_fda}.img"

      _msg_args+=(\
      "checking: '${_fdx}'" \
      "src: '${_fdx}', dst: '${_fdb}'")

      _cmd_args+=(\
      "eval if [[ ! -e ${_fdx} ]] ; then exit 1 ; fi" \
      "qemu-img convert -f vmdk -O raw ${_fdx} ${_fdb}")

    fi

    if [[ "$remove_unused" == "yes" ]] ; then

      _msg_args+=(\
      "remove: '${_fdx}'")
      _cmd_args+=(\
      "rm -fr ${_fdx}")

      if [[ -e "${_fda}-flat.vmdk" ]] ; then

        _msg_args+=(\
        "remove: '${_fda}-flat.vmdk")
         _cmd_args+=(\
        "rm -fr ${_fda}-flat.vmdk")

      fi

    fi

    _x=$((_x + 1))

  fi

  return $_STATE

}
